syntax = "proto3";
package nezha.proto;


message Request {
    uint64 sendtime = 1;
    uint32 bound=2;
    uint32 clientid = 3;
    uint32 reqid = 4;
    bytes command=5;
    uint64 proxyid = 6;
    uint32 key = 7;
}

message TimeStats {
    uint64 sendtime = 1;
    uint64 proxytime1 =2;
    uint64 replicatime1 = 3;
    uint64 replicatime2= 4;
    uint64 proxytime2 = 5;
}
message Reply {
    uint32 clientid = 1;
    uint32 reqid = 2;
    uint32 view = 3;
    uint32 replicaid = 4;
    bytes hash = 5;
    bytes result = 6;
    uint32 replytype = 7;
    uint32 owd = 8;
    uint32 syncedlogid = 9; // use this value to piggyback slow-reply
    // TimeStats t = 10; // This is for debug, should be deleted after release
}

message IndexSync {
    uint32 logidbegin = 1;
    uint32 logidend = 2;
    repeated uint64 deadlines = 3;
    repeated uint64 reqkeys =4;
    uint32 view = 5;
    // crash-vector
    repeated uint32 cv = 6;
    uint64 sendtime = 7;
}

message AskIndex {
    uint32 logidbegin = 1;
    uint32 logidend = 2;
    uint32 replicaid = 3;
}

message AskReq {
    repeated uint64 missedreqkeys = 1;
    uint32 replicaid = 2;
}

message MissedReq {
    repeated Request reqs = 1;
    uint32 replicaid = 2;
}

message ViewChangeRequest{
    uint32 view = 1;
    uint32 replicaid = 2;
    repeated uint32 cv = 3;
}

message ViewChange {
    uint32 view = 1;
    uint32 replicaid = 2;
    repeated uint32 cv = 3;
    uint32 lastnormalview= 4;
    // In the algo, we should include the logs in the viewchange msg
    // But that is too large. As an implementation optimization, Let's use the following information, and later do state transfer to get the necessary entries
    uint32 syncpoint = 5; // for synced logs: the max synced log id
    uint32 unsyncednum = 6; 
}


message StateTransferRequest {
    uint32 view = 1;
    uint32 replicaid = 2;
    bool issynced = 3;
    uint32 logbegin = 4;
    uint32 logend = 5;
}


message StateTransferReply {
    uint32 view = 1;
    uint32 replicaid = 2;
    repeated uint32 cv = 3;
    bool issynced = 4;
    uint32 logbegin = 5;
    uint32 logend = 6;
    repeated Request reqs = 7;
}


message StartView {
    uint32 view = 1;
    uint32 replicaid = 2;
    repeated uint32 cv = 3;
    uint32 syncedlogid = 4;
}


message CrashVectorRequest {
    bytes nonce = 1;
    uint32 replicaid = 2;
}

message CrashVectorReply {
    bytes nonce = 1;
    uint32 replicaid = 2;
    repeated uint32 cv = 3;
}

message RecoveryRequest {
    repeated uint32 cv = 1;
    uint32 replicaid = 2;
}

message RecoveryReply {
    uint32 view = 1;
    repeated uint32 cv = 2;
    uint32 replicaid = 3;
    uint32 syncedlogid = 4;
}

message SyncStatusReport {
    uint32 view = 1;
    repeated uint32 cv = 2;
    uint32 replicaid = 3;
    uint32 syncedlogid = 4;
}

message CommitInstruction {
    uint32 view = 1;
    repeated uint32 cv = 2;
    uint32 replicaid = 3;
    uint32 committedlogid = 4;
}